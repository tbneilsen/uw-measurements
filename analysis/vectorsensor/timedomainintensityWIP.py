# -*- coding: utf-8 -*-
"""
Created on Fri Nov 12 12:30:12 2021

@author: Corey Dobbs WIP
"""
import numpy as np
from numpy.fft import fft,fftshift,fftfreq,ifft,ifftshift
import matplotlib.pyplot as plt
plt.close('all')
import sys
sys.path.append("D:/uw-acoustics-research/uw-meas-codes/byuarglib/")
import byuarglib as byu
#import UWIntensityFuncs as UWI
filepath = "D:/Box/Underwater Measurements/2021-11-12/"

fs = 150000
sig_cond = .01
p_ref = 1e-6
I_ref = 6.61e-19
rho = 997
c = 1471

ID_num_amb1 = 0
ID_num_v1 = 1
ID_num_p1 = 2
ID_num_amb2 = 3
ID_num_v2 = 4
ID_num_p2 = 5
ID_num_amb3 = 6
ID_num_v3 = 7
ID_num_p3 = 8

vx_ID = 0
vy_ID = 1
vz_ID = 2
p_ID = 3

#Position 1
vx1a = byu.binfileload(filepath,'ID',vx_ID,ID_num_amb1)
vy1a = byu.binfileload(filepath,'ID',vy_ID,ID_num_amb1)
vz1a = byu.binfileload(filepath,'ID',vz_ID,ID_num_amb1)
p1a = byu.binfileload(filepath,'ID',p_ID,ID_num_amb1)/sig_cond
vx1 = byu.binfileload(filepath,'ID',vx_ID,ID_num_v1)
vy1 = byu.binfileload(filepath,'ID',vy_ID,ID_num_v1)
vz1 = byu.binfileload(filepath,'ID',vz_ID,ID_num_v1)
p1 = byu.binfileload(filepath,'ID',p_ID,ID_num_p1)/sig_cond

#Position 2
vx2a = byu.binfileload(filepath,'ID',vx_ID,ID_num_amb2)
vy2a = byu.binfileload(filepath,'ID',vy_ID,ID_num_amb2)
vz2a = byu.binfileload(filepath,'ID',vz_ID,ID_num_amb2)
p2a = byu.binfileload(filepath,'ID',p_ID,ID_num_amb2)/sig_cond
vx2 = byu.binfileload(filepath,'ID',vx_ID,ID_num_v2)
vy2 = byu.binfileload(filepath,'ID',vy_ID,ID_num_v2)
vz2 = byu.binfileload(filepath,'ID',vz_ID,ID_num_v2)
p2 = byu.binfileload(filepath,'ID',p_ID,ID_num_p2)/sig_cond

#Position 3
vx3a = byu.binfileload(filepath,'ID',vx_ID,ID_num_amb3)
vy3a = byu.binfileload(filepath,'ID',vy_ID,ID_num_amb3)
vz3a = byu.binfileload(filepath,'ID',vz_ID,ID_num_amb3)
p3a = byu.binfileload(filepath,'ID',p_ID,ID_num_amb3)/sig_cond
vx3 = byu.binfileload(filepath,'ID',vx_ID,ID_num_v3)
vy3 = byu.binfileload(filepath,'ID',vy_ID,ID_num_v3)
vz3 = byu.binfileload(filepath,'ID',vz_ID,ID_num_v3)
p3 = byu.binfileload(filepath,'ID',p_ID,ID_num_p3)/sig_cond



L = len(vx1)
t = np.arange(0,L/fs,1/fs)
T = L/fs
dt = 1/fs
#[:,0:ns//2]*np.sqrt(2/W) #scipy.fft already divides by ns, but matlab does not
#FFT
sp_vx1 = fftshift(fft(vx1))
sp_vy1 = fftshift(fft(vy1))
sp_vz1 = fftshift(fft(vz1))


sp_vx2 = fftshift(fft(vx2))
sp_vy2 = fftshift(fft(vy2))
sp_vz2 = fftshift(fft(vz2))

sp_vx3 = fftshift(fft(vx3))
sp_vy3 = fftshift(fft(vy3))
sp_vz3 = fftshift(fft(vz3))

freq = fftshift(fftfreq(t.shape[-1],1/fs))
# plt.figure()
# plt.plot(freq, sp_vx1.real)
# plt.grid()
# plt.xlim([10, 5000])

#Import sensitivities

x_freq = np.array([10.22029846850511, 11.232411940394085, 12.078660286617875, 13.083352347643194, 14.274928933739758, 15.575029292857643, 17.24221127581675, 19.227002329372812, 21.131047318035975, 23.392956474498433, 25.52348127773076, 27.84806008855136, 31.508129118298015, 34.37774718744459, 38.05760933395839, 42.43850928451851, 47.66869505038102, 53.1559494377222, 60.142266323764765, 67.06538251985371, 75.87978211352387, 84.61448036513036, 95.04249629341362, 109.9029432716683, 124.34755006595034, 140.6905418389522, 166.27241724092744, 199.38136798786553, 242.58167190591448, 278.4806008855136, 324.3702103077194, 369.6778234396754, 418.26455976002546, 473.2373104604571, 551.220032675185, 628.2133886344558, 705.635743329074, 781.1679579532339, 909.8937391768545, 1000, 1115.112326476353, 1234.4761584615364, 1386.6148584567668, 1626.8841634450591, 1854.124220183775, 2097.8128286144606, 2533.877552279372, 2339.2956474498424, 2951.425870949254, 3220.2284068670087, 3513.512263500637, 3833.507088952023, 4243.8556321224305, 4596.85316584366, 5052.07972687205, 4836.62655933848]) 
x_sens = np.array([-208.4070869653136, -206.78467022727608, -205.01475185167556, -203.39233511363804, -201.76991837560053, -200, -197.93511210765865, -196.01770334729017, -194.24780185088224, -192.4778778488842, -190.85546111084668, -189.2330387464116, -187.16814522767274, -185.5457228632377, -183.77581574043222, -181.85840698006376, -180.08849985725828, -178.3185871080553, -176.40118397408435, -174.9262576208148, -173.1563448716118, -171.3864321224088, -169.76401538437128, -167.9941026351683, -166.81416267783214, -165.48672670933053, -163.5693235753596, -161.65192044138863, -159.5870212962522, -158.11209494298265, -156.34218219377965, -155.01475185167556, -153.68731588317394, -152.50737592583778, -150.44247678070138, -148.52507364673045, -146.60766769956072, -144.9852509615232, -143.95280701535253, -144.8377577635565, -146.1651965452569, -147.49262407416222, -149.41003002133192, -151.62241673803751, -153.68731588317394, -155.60471901714487, -158.25958532775059, -156.9321549856465, -160.47197485765494, -161.7994108261566, -163.1268467946582, -164.30678675199437, -166.37168027073324, -169.3215329772724, -173.7463120370811, -171.53392250717675])
x_freq = np.append(np.flip(-x_freq),x_freq)
x_sens = np.append(np.flip(x_sens),x_sens)
plt.figure()
plt.plot(x_freq,x_sens)
plt.grid()
y_freq = np.array([9.909758078848219, 11.353196822953851, 12.430489852679903, 13.610006096712409, 15.037143481096349, 16.765233849708785, 18.691905945505994, 21.029783733210216, 23.660053676799187, 26.379101408912007, 29.145198758141483, 32.79051523862945, 37.56672670191928, 42.26533099460339, 47.98466215690239, 54.97402758126427, 65.30715445041264, 71.50408236224351, 81.91924709403268, 91.33346277987756, 100.91063697452304, 114.56583231014056, 128.89507810072928, 146.33711911875895, 167.65233849708804, 192.0722969866029, 220.0492256799066, 245.33743260978574, 278.5364160457071, 319.10756332960057, 365.5882358931654, 422.6533099460337, 493.0753414379461, 559.7981399890175, 635.5498464418795, 689.5769670386085, 761.8856098178795, 872.8605901390437, 1000, 1094.8889591650495, 1243.0489852679889, 1361.000609671241, 1531.2258027706503, 1676.522225442225, 1920.721641442376, 2141.4537621097566, 2431.2346048487034, 2810.7287163773094, 3162.2765666100563, 3655.8823589316503, 4076.0216693792845, 4382.602323984733, 4669.728150666063])
y_sens = np.array([-207.9044171528419, -205.51470572766962, -203.67647048511307, -201.83823524255652, -200, -197.79413033109188, -195.77206034458217, -193.5661766510521, -191.54411367685336, -189.52207173958746, -187.86764319174029, -185.6617665105212, -183.45588281699116, -181.43381984279242, -179.4117779055265, -177.3897079190168, -174.63235505518196, -173.5294097022615, -171.50735374037367, -170.03676694879064, -168.56617314489665, -166.91176563398233, -165.99264801270408, -164.52206122112102, -162.86764669789576, -161.76470835728622, -160.11029383406094, -158.8235277618092, -157.5367616895574, -156.06617489797438, -154.59558810639135, -153.30882203413958, -151.47058679158306, -149.81617928066873, -147.79411630646996, -146.32352951488693, -145.2205911742774, -144.3014735529991, -145.2205911742774, -146.5073502342182, -147.97794403811218, -149.81617928066873, -151.28676607225177, -152.94117358316606, -154.7794088257226, -156.61764406827916, -158.27205859150442, -160.47794228503443, -162.49999824692227, -164.3382334894788, -166.91176563398233, -169.48529076617493, -172.97794053195673])
y_freq = np.append(np.flip(-y_freq),y_freq)
y_sens = np.append(np.flip(y_sens),y_sens)

z_freq = np.array([9.566862388340175, 10.569119902030973, 11.676377371085806, 13.043226578054817, 14.896258189732244, 16.825257726100954, 19.215613052315987, 21.94554634072577, 25.063317151616765, 28.624049154731658, 33.054518844441, 37.750556578990135, 43.59363963788101, 49.78696460168567, 60.09609595054467, 68.63391601717404, 76.66827553621107, 87.56042230152339, 101.11323027004049, 119.37774172866301, 137.8551927523018, 162.75656066360915, 187.94840367110714, 226.86591542855678, 270.82717785452724, 316.2277660168373, 373.34932805697815, 426.39086652181646, 503.4116564485246, 594.3450381934508, 663.9197032031976, 749.894367669458, 895.2062053979245, 1022.3868065816192, 1167.6367509419492, 1378.5519275230165, 1574.400729562301, 1778.2786590867531, 2076.3835157654607, 2293.9126173145755, 2619.8053378674313, 2959.0610385986183, 3455.105498823412, 3945.970480875676, 4311.3685045425345, 4816.061906793983])
z_sens = np.array([-207.13237153411274, -205.1470572766961, -202.94117498562827, -200.9558859725311, -198.52941040349256, -196.1029600787735, -193.89707778770565, -191.470593803894, -189.48531320556995, -186.83823594378765, -184.63235365271981, -182.20588649845442, -180.2205890705841, -177.79412191631872, -175.1470614840827, -173.16176405621238, -171.6176531842834, -169.63235575641306, -167.86765160651345, -166.10294745661378, -164.7794130331092, -163.01470888320955, -161.4705895965074, -159.48530058341026, -157.72058801873746, -155.95588386883782, -154.63235786010637, -153.08823857340423, -151.3235344235046, -149.11765213243675, -147.13235470456644, -145.3676505546668, -144.04412454593535, -145.58823541786433, -147.13235470456644, -149.77941513680247, -151.54411928670214, -153.30882343660176, -155.95588386883782, -157.2794182923424, -159.04412244224204, -161.02941145533924, -163.45588702437774, -165.66176931544558, -168.3088297476816, -172.94117919301485])
z_freq = np.append(np.flip(-z_freq),z_freq)
z_sens = np.append(np.flip(z_sens),z_sens)

#Interpolate up to frequency array

x_sens = np.interp(freq,x_freq,x_sens)
y_sens = np.interp(freq,y_freq,y_sens)
z_sens = np.interp(freq,z_freq,z_sens)

#Apply sensitivities to data
sp_vx1 = 20*np.log10(sp_vx1/p_ref) - x_sens
sp_vy1 = 20*np.log10(sp_vy1/p_ref) - y_sens
sp_vz1 = 20*np.log10(sp_vz1/p_ref) - z_sens

sp_vx2 = 20*np.log10(sp_vx2/p_ref) - x_sens
sp_vy2 = 20*np.log10(sp_vy2/p_ref) - y_sens
sp_vz2 = 20*np.log10(sp_vz2/p_ref) - z_sens

sp_vx3 = 20*np.log10(sp_vx3/p_ref) - x_sens
sp_vy3 = 20*np.log10(sp_vy3/p_ref) - y_sens
sp_vz3 = 20*np.log10(sp_vz3/p_ref) - z_sens

#Inverse fft back to time domain
vx1 = ifft(p_ref*10**(ifftshift(sp_vx1)/20)/rho/c)
vy1 = ifft(p_ref*10**(ifftshift(sp_vy1)/20)/rho/c)
vz1 = ifft(p_ref*10**(ifftshift(sp_vz1)/20)/rho/c)

vx2 = ifft(p_ref*10**(sp_vx2/20)/rho/c)
vy2 = ifft(p_ref*10**(sp_vy2/20)/rho/c)
vz2 = ifft(p_ref*10**(sp_vz2/20)/rho/c)

vx3 = ifft(p_ref*10**(sp_vx3/20)/rho/c)
vy3 = ifft(p_ref*10**(sp_vy3/20)/rho/c)
vz3 = ifft(p_ref*10**(sp_vz3/20)/rho/c)
plt.figure()
plt.plot(t,vy1)

#Calculate time-averaged intensities

Ix1 = np.sum(p1*vx1*dt)/T
Iy1 = np.sum(p1*vy1*dt)/T
Iz1 = np.sum(p1*vz1*dt)/T

Ix2 = np.sum(p2*vx2*dt)/T
Iy2 = np.sum(p2*vy2*dt)/T
Iz2 = np.sum(p2*vz2*dt)/T

Ix3 = np.sum(p3*vx3*dt)/T
Iy3 = np.sum(p3*vy3*dt)/T
Iz3 = np.sum(p3*vz3*dt)/T



