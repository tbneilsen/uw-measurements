"""
Created on Thu Nov  4 12:05:00 2021
@author: kayly
"""
# -*- coding: utf-8 -*-
"""
Created on Tue May  4 09:44:31 2021
Comparing scan data with Novak models (rough coded)
@author: kayly
"""
import numpy as np
from pathlib import Path
def binfileload(path, IDname=None, IDnum=None, CHnum=None, N=-1, Nstart=0):
    """
    Loads in a bin file generated by AFR
    Loads float32 single-precision, little-endian binary files without header
    information.
    This function returns NumPy datatypes, so make sure you are importing
    NumPy in your base scripts.
    Parameters
    ----------
    path : str
        The path to the file, do not include trailing separator. If the next three
        values are not input, it will assume that this is just a file you want to load.
    IDname : str, optional
        Root test name selected in AFR to save the files, e.g. 'ID'
    IDnum : int, optional
        Test number as recorded by AFR, e.g. 1
    CHnum : int, optional
        Channel number as recorded by AFR, e.g. 0
    N : int, optional
        Number of samples to read. Default is entire file.
    Nstart: int, optional
        Number of samples to offset from beginning of file. Default beginning.
    Returns
    -------
    x : ndarray of float
        The full array of data is returned
    Notes
    -------
    Author: David Van Komen (david.vankomen@gmail.com)
    Last Modified: 02/18/20
    Based on: binfileload.m by Kent Gee
    """
    if IDname == None and CHnum == None and IDnum == None:
        # we're going to use just the filename if it's ever not zero
        filename = Path(path)
        if not filename.exists():
            raise FileNotFoundError(f"The file '{filename}'' does not exist!")
    elif IDname != None and CHnum != None and IDnum != None:
        # generate the filename based on input parameters
        filename = Path(path)
        filename = filename / f"{IDname}{IDnum:03.0f}_{CHnum:03.0f}.bin"
        if not filename.exists():
            raise FileNotFoundError(
                f"The file '{str(filename)}'' governed by these inputs doesn't exist.")
    else:
        raise Exception(
            "Sorry, but if you're going to use one of the optional " +
            "filename inputs, you need to use them all.")
    # open the file as our binary file type
    with open(filename, 'rb') as binary_file:
        # fix where we start reading
        # convert Nstart to bytes instead of bits
        Nstart = Nstart * 4
        # move the binary file to where we want to start reading
        binary_file.seek(Nstart)
        # now, we get the handle for the actual data that's left
        data = binary_file.read()
        # grab the data from the buffer
        x = np.frombuffer(data, dtype=np.float32, count=N)
        binary_file.close()
    return x
# end binfile load
import sys
sys.path.insert(1,'C:/Users/kayly/acoustics/underwater-measurements/analysis/')
import ESAUResponse as ER
import matplotlib.pyplot as plt
import TimeGate_UnderwaterTank as TG
from readLogFile import readLogFile
sys.path.insert(2,'C:/Users/kayly/acoustics/byuarglib')
#import byuarglib as byu
import matplotlib.pylab as pylab
params = {'legend.fontsize': 15,
          'figure.figsize': (15, 10),
         'axes.labelsize': 24,
         'axes.titlesize':28,
         'axes.titleweight':'bold',
         'xtick.labelsize':'xx-large',
         'ytick.labelsize':'xx-large',
         'lines.linewidth':2}
pylab.rcParams.update(params)
path = 'C:/Users/kayly/acoustics/Data/2021-05-20/'
#path = 'C:/Users/kayly/Box/Underwater Measurements/2021-09-13/'
date = '2021-05-20_scan2'
filename1 = '/ID001_001'
filename = '/ID002_001'
filenum = 0
freqMin,freqMax,temperature,fs,leadingZeros,signalDuration,trailingZeros,measurementDuration,D,xSource,ySource,zSource,xRec,yRec,zRec = readLogFile(filename+'log.txt',path+date)
AEgir_pose = (xSource,ySource,zSource)
Ran_pose = (xRec,yRec,zRec)
cal = binfileload(path + date + filename1+'.bin')
gen = binfileload(path + date + '/signal_out.bin')
rec = binfileload(path + date + filename + '.bin')
tshort,tside,tdirect,directpath = TG.gateValue(AEgir_pose, Ran_pose, D)
sysIR,t,Hf,f1 = ER.SysResponse(cal,gen,fs,tshort,wiener=False,domain='f')
Htank, ftank = ER.TankResponse(rec,gen,fs,sysIR,wiener=True,domain='f')
Hsstank = 2*Htank[0:(int(len(Htank)/2))]   #convert to single-sided FRF
fsstank = ftank[0:int(len(ftank)/2)]/1000    #convert to single-sided from Hz to kHz
Hsstank_dB = 20*np.log10(Hsstank)
plt.plot(ftank,Hsstank_dB)